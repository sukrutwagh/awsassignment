{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template to create stack per Assignment 1 - Refer: AWS Fundamentals - Exercise 1 v4 1.docx",
    "Metadata": {},
    "Mappings": {},
    "Parameters": {
        "KeyPair": {
            "Description": "Name of the keypair to use for SSH access",
            "Type": "String"
        },
        "WebServerCapacity": {
            "Default": "1",
            "Description": "The initial number of WebServer instances",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "5",
            "ConstraintDescription": "must be between 1 and 5 EC2 instances."
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must be a t2.micro instance type."
        },
        "WindowsImageId": {
            "Description": "Windows server image id",
            "Type": "String",
            "Default": "ami-05b2eec0169084735",
            "AllowedValues": [
                "ami-05b2eec0169084735"
            ],
            "ConstraintDescription": "must be ami-05b2eec0169084735"
        },
        "LinuxImageId": {
            "Description": "Linux server image id",
            "Type": "String",
            "Default": "ami-05b3bcf7f311194b3",
            "AllowedValues": [
                "ami-05b3bcf7f311194b3"
            ],
            "ConstraintDescription": "must be ami-05b3bcf7f311194b3"
        },
        "SSHLocation": {
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": "10.0.0.0/16"
            }
        },
        "PublicSubnetLinux": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.0.0/24",
                "AvailabilityZone": "ap-southeast-1a",
                "MapPublicIpOnLaunch" : "true"
            }
        },
        "PublicSubnetWindows": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.1.0/24",
                "AvailabilityZone": "ap-southeast-1b",
                "MapPublicIpOnLaunch" : "true"
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "VPCGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnetLinuxRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetLinux"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnetWindowsRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetWindows"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "NetworkAclEntryInboundAll": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "CidrBlock" : "0.0.0.0/0",
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false"
            }
        },
        "NetworkAclEntryOutboundAll": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "CidrBlock" : "0.0.0.0/0",
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true"
            }
        },
        "PublicSubnetLinuxNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetLinux"
                },
                "NetworkAclId": {"Ref": "NetworkAcl"}
            }
        },
        "PublicSubnetWindowsNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetWindows"
                },
                "NetworkAclId": {"Ref": "NetworkAcl"}
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [{"Ref": "PublicSubnetLinux"}, {"Ref": "PublicSubnetWindows"}]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 300,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5,
                "VpcId": {
                    "Ref": "VPC"
                },
                "TargetGroupAttributes": [
                    {
                        "Key": "stickiness.enabled",
                        "Value": "true"
                    },
                    {
                        "Key": "stickiness.type",
                        "Value": "lb_cookie"
                    },
                    {
                        "Key": "stickiness.lb_cookie.duration_seconds",
                        "Value": "30"
                    }
                ]
            }
        },
        "LinuxVolume" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
               "Size" : "1",
               "AvailabilityZone" : { "Fn::GetAtt" : [ "PublicSubnetLinux", "AvailabilityZone" ] }
            },
            "DeletionPolicy" : "Snapshot"
         },
         "WindowsVolume" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
               "Size" : "1",
               "AvailabilityZone" : { "Fn::GetAtt" : [ "PublicSubnetWindows", "AvailabilityZone" ] }
            },
            "DeletionPolicy" : "Snapshot"
         },
        "LinuxInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata" : {
                "Comment1" : "Configure the bootstrap helpers to install the Apache Web Server and PHP",
                "AWS::CloudFormation::Init" : {
                  "config" : {
                    "packages" : {
                      "yum" : {
                        "httpd"     : [],
                        "php"       : []
                      }
                    },
        
                    "files" : {
                      "/var/www/html/index.php" : {
                        "content" : { "Fn::Join" : [ "", [
                          "<html>\n",
                          "  <head>\n",
                          "    <title>AWS CloudFormation PHP Sample</title>\n",
                          "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                          "  </head>\n",
                          "  <body>\n",
                          "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                          "    <p/>\n",
                          "    <?php\n",
                          "      // Print out the current data and tie\n",
                          "      print \"The Current Date and Time is: <br/>\";\n",
                          "      print date(\"g:i A l, F j Y.\");\n",
                          "    ?>\n",
                          "    <p/>\n",
                          "    <?php\n",
                          "      // Setup a handle for CURL\n",
                          "      $curl_handle=curl_init();\n",
                          "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                          "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                          "      // Get the hostname of the intance from the instance metadata\n",
                          "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                          "      $hostname = curl_exec($curl_handle);\n",
                          "      if (empty($hostname))\n",
                          "      {\n",
                          "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                          "      }\n",
                          "      else\n",
                          "      {\n",
                          "        print \"Server = \" . $hostname . \"<br />\";\n",
                          "      }\n",
                          "      // Get the instance-id of the intance from the instance metadata\n",
                          "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                          "      $instanceid = curl_exec($curl_handle);\n",
                          "      if (empty($instanceid))\n",
                          "      {\n",
                          "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                          "      }\n",
                          "      else\n",
                          "      {\n",
                          "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                          "      }\n",
                          "    ?>\n",
                          "    <h2>PHP Information</h2>\n",
                          "    <p/>\n",
                          "    <?php\n",
                          "      phpinfo();\n",
                          "    ?>\n",
                          "  </body>\n",
                          "</html>\n"
                        ]]},
                        "mode"  : "000600",
                        "owner" : "apache",
                        "group" : "apache"
                      },
                      "/etc/cfn/cfn-hup.conf" : {
                        "content" : { "Fn::Join" : ["", [
                          "[main]\n",
                          "stack=", { "Ref" : "AWS::StackId" }, "\n",
                          "region=", { "Ref" : "AWS::Region" }, "\n"
                        ]]},
                        "mode"    : "000400",
                        "owner"   : "root",
                        "group"   : "root"
                      },
        
                      "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                        "content": { "Fn::Join" : ["", [
                          "[cfn-auto-reloader-hook]\n",
                          "triggers=post.update\n",
                          "path=Resources.LinuxInstance.Metadata.AWS::CloudFormation::Init\n",
                          "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LinuxInstance ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n",
                          "runas=root\n"
                        ]]},
                        "mode"    : "000400",
                        "owner"   : "root",
                        "group"   : "root"
                      }
                    },
        
                    "services" : {
                      "sysvinit" : {
                        "httpd" : { "enabled" : "true", "ensureRunning" : "true" },
                        "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                      "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                      }
                    }
                  }
                }
              },
            "Properties": {
              "InstanceType": { "Ref" : "InstanceType" },
              "ImageId": { "Ref" : "LinuxImageId" },
              "Volumes" : [  {  "Device" : "/dev/sdh", "VolumeId" : {"Ref": "LinuxVolume"} } ],
              "NetworkInterfaces" : [{
                "GroupSet"                 : [{"Ref": "WebServerSecurityGroup"}],
                "AssociatePublicIpAddress" : "true",
                "DeviceIndex"              : "0",
                "DeleteOnTermination"      : "true",
                "SubnetId"                 : {"Ref": "PublicSubnetLinux"}
              }],
              "KeyName": {
                "Ref": "KeyPair"
              },
              "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
   
                "# Install the files and packages from the metadata\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ", { "Ref" : "AWS::StackName" },
                "         --resource LinuxInstance ",
                "         --region ", { "Ref" : "AWS::Region" }, "\n",
   
                "# Signal the status from cfn-init\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ", { "Ref" : "AWS::StackName" },
                "         --resource WebServerGroup ",
                "         --region ", { "Ref" : "AWS::Region" }, "\n"
           ]]}}
            }
          },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 locked down to the ELB and SSH access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Fn::Select": [
                                0,
                                {
                                    "Fn::GetAtt": [
                                        "ApplicationLoadBalancer",
                                        "SecurityGroups"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Description": "URL for newly created website stack",
            "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]}]] }
        }
    }
}